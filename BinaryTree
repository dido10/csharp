using System;
using System.Collections;
using System.Collections.Generic;
using System.IO;
using System.Linq;
class Node{
    public Node left,right;
    public int data;
    public Node(int data){
        this.data=data;
        left=right=null;
    }
}
class Solution{

 public static Node removeDuplicates(Node head){
    //Write your code here
    
    if(head == null){
         return null;
    }
       
    HashSet<int> list = new HashSet<int>();
    list.Add(head.data);//1
    Node orgHead = head;
    
    while(head.next != null)
    {
        if(!list.Add(head.next.data))
            head.next = head.next.next;
        else
            head = head.next;
    }
    
    return orgHead;
  }

	static int getHeight(Node root){
      //Write your code here
      Node iter=root;
      if(iter!=null){
          return 1+Math.Max(getHeight(iter.left),getHeight(iter.right));
      }
      else{ return -1;
      }
    }
	 static void levelOrder(Node root){
          //Write your code here
        Queue<Node> iter = new Queue<Node>();
        iter.Enqueue(root);
        
        while(iter.Count > 0)
        //
        {
            Node temp = iter.Dequeue();//first elem of queue will be eliminate and equals to node temp
            if(temp == null)
                continue;
                
            iter.Enqueue(temp.left);
            iter.Enqueue(temp.right);
            Console.Write(temp.data + " ");
        }           
    }
	static Node insert(Node root, int data){
        if(root==null){
            return new Node(data);
        }
        else{
            Node cur;
            if(data<=root.data){
                cur=insert(root.left,data);
                root.left=cur;
            }
            else{
                cur=insert(root.right,data);
                root.right=cur;
            }
            return root;
        }
    }
    static void Main(String[] args){
        Node root=null;
        int T=Int32.Parse(Console.ReadLine());
        while(T-->0){
            int data=Int32.Parse(Console.ReadLine());
            root=insert(root,data);            
        }
        levelOrder(root);
       int height=getHeight(root);
        Console.WriteLine(height);
	head=removeDuplicates(head);
	display(head);
        
    }
}
